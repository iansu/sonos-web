const { sonosClient } = require("networking");

const { pusher } = require("./pusher-client");
const { fromChannel } = require("./channels");
const { decrypt } = require("./encryption");

async function subscribe(channel, token) {
  const { object, id, type } = fromChannel(channel);

  const client = sonosClient(token);
  const url = subscriptionUrl(object, id, type);

  try {
    await client.post(url);
    console.log("Subscribed to %s", url);
  } catch (error) {
    console.log("Unable to subscribe to %s. %s.", url, error.message);
  }
}

async function unsubscribe(channel, token) {
  const { object, id, type } = fromChannel(channel);

  const client = sonosClient(token);
  const url = subscriptionUrl(object, id, type);

  try {
    await client.delete(url);
    console.log("Unsubscribed from %s", url);
  } catch (error) {
    console.log("Unable to unsubscribe from %s. %s.", url, error.message);
  }
}

function subscriptionUrl(object, id, type) {
  return `/${mapObject(object)}/${id}/${mapType(type)}/subscription`;
}

function mapObject(object) {
  switch (object) {
    case "groupId":
      return "groups";
    case "playerId":
      return "players";
    case "householdId":
      return "households";
    default:
      return object.replace(/Id%/, s);
  }

  return object;
}

function mapType(type) {
  switch (type) {
    case "metadataStatus":
      return "playbackMetadata";
    case "playbackStatus":
      return "playback";
    default:
      return type.replace(/Status$/, "");
  }
}

module.exports = { subscribe, unsubscribe };
